{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\brandon.lacy\\\\xplore\\\\src\\\\components\\\\ToggleIcon.tsx\";\n\nimport React, { useRef, useState } from \"react\";\nimport { Transition, Transitioning } from 'react-native-reanimated';\nimport { SimpleLineIcons } from \"@expo/vector-icons\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { navigate } from \"../utils/RootNavigation\";\n\nvar ToggleIcon = function ToggleIcon() {\n  var ref = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      toggled = _useState2[0],\n      setToggled = _useState2[1];\n\n  var toggle = function toggle() {\n    return setToggled(!toggled);\n  };\n\n  var onPressHandler = function onPressHandler() {\n    var _ref$current;\n\n    toggle();\n    navigate(toggled ? 'mapScreen' : 'listScreen');\n    (_ref$current = ref.current) == null ? void 0 : _ref$current.animateNextTransition();\n  };\n\n  return React.createElement(View, {\n    style: styles.view,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: onPressHandler,\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, React.createElement(Transitioning.View, {\n    transition: transition,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }, React.createElement(SimpleLineIcons, {\n    size: 30,\n    name: toggled ? 'list' : 'map',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }))));\n};\n\nvar transition = React.createElement(Transition.Together, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }\n}, React.createElement(Transition.Out, {\n  type: \"scale\",\n  durationMs: 100,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }\n}), React.createElement(Transition.Change, {\n  interpolation: 'easeInOut',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }\n}), React.createElement(Transition.In, {\n  type: \"scale\",\n  durationMs: 100,\n  delayMs: 50,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }\n}));\nvar styles = StyleSheet.create({\n  button: {\n    borderWidth: 1,\n    borderColor: 'rgba(0,0,0,0.2)',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 65,\n    height: 65,\n    backgroundColor: '#fff',\n    borderRadius: 50\n  },\n  view: {\n    position: 'absolute',\n    bottom: 40,\n    right: 40\n  }\n});\nexport default ToggleIcon;","map":{"version":3,"sources":["C:/Users/brandon.lacy/xplore/src/components/ToggleIcon.tsx"],"names":["React","useRef","useState","Transition","Transitioning","SimpleLineIcons","navigate","ToggleIcon","ref","toggled","setToggled","toggle","onPressHandler","current","animateNextTransition","styles","view","button","transition","StyleSheet","create","borderWidth","borderColor","alignItems","justifyContent","width","height","backgroundColor","borderRadius","position","bottom","right"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA6D,yBAA7D;AACA,SAASC,eAAT,QAAgC,oBAAhC;;;;AAEA,SAASC,QAAT;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,MAAMC,GAAG,GAAGP,MAAM,CAA2B,IAA3B,CAAlB;;AACA,kBAA8BC,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOO,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,WAAMD,UAAU,CAAC,CAACD,OAAF,CAAhB;AAAA,GAAf;;AAEA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AACzBD,IAAAA,MAAM;AACNL,IAAAA,QAAQ,CAACG,OAAO,GAAG,WAAH,GAAiB,YAAzB,CAAR;AACA,oBAAAD,GAAG,CAACK,OAAJ,kCAAaC,qBAAb;AACH,GAJD;;AAMA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AACI,IAAA,OAAO,EAAEJ,cADb;AAEI,IAAA,KAAK,EAAEG,MAAM,CAACE,MAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,aAAD,CAAe,IAAf;AAAoB,IAAA,UAAU,EAAEC,UAAhC;AAA4C,IAAA,GAAG,EAAEV,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAE,EAAvB;AAA2B,IAAA,IAAI,EAAEC,OAAO,GAAG,MAAH,GAAY,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CADJ,CADJ;AAaH,CAzBD;;AA2BA,IAAMS,UAAU,GACZ,oBAAC,UAAD,CAAY,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,UAAD,CAAY,GAAZ;AAAgB,EAAA,IAAI,EAAC,OAArB;AAA6B,EAAA,UAAU,EAAE,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,UAAD,CAAY,MAAZ;AAAmB,EAAA,aAAa,EAAE,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,EAGI,oBAAC,UAAD,CAAY,EAAZ;AAAe,EAAA,IAAI,EAAC,OAApB;AAA4B,EAAA,UAAU,EAAE,GAAxC;AAA6C,EAAA,OAAO,EAAE,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,CADJ;AASA,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,MAAM,EAAE;AACJI,IAAAA,WAAW,EAAC,CADR;AAEJC,IAAAA,WAAW,EAAC,iBAFR;AAGJC,IAAAA,UAAU,EAAC,QAHP;AAIJC,IAAAA,cAAc,EAAC,QAJX;AAKJC,IAAAA,KAAK,EAAC,EALF;AAMJC,IAAAA,MAAM,EAAC,EANH;AAOJC,IAAAA,eAAe,EAAC,MAPZ;AAQJC,IAAAA,YAAY,EAAC;AART,GADqB;AAW7BZ,EAAAA,IAAI,EAAE;AACFa,IAAAA,QAAQ,EAAE,UADR;AAEFC,IAAAA,MAAM,EAAE,EAFN;AAGFC,IAAAA,KAAK,EAAE;AAHL;AAXuB,CAAlB,CAAf;AAkBA,eAAexB,UAAf","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Transition, Transitioning, TransitioningView } from 'react-native-reanimated';\r\nimport { SimpleLineIcons } from \"@expo/vector-icons\";\r\nimport { StyleSheet, TouchableOpacity, View } from \"react-native\";\r\nimport { navigate } from \"../utils/RootNavigation\";\r\n\r\nconst ToggleIcon = () => {\r\n    const ref = useRef<TransitioningView | null>(null);\r\n    const [toggled, setToggled] = useState(false);\r\n\r\n    const toggle = () => setToggled(!toggled);\r\n\r\n    const onPressHandler = () => {\r\n        toggle();\r\n        navigate(toggled ? 'mapScreen' : 'listScreen');\r\n        ref.current?.animateNextTransition();\r\n    }\r\n\r\n    return (\r\n        <View style={styles.view}>\r\n            <TouchableOpacity\r\n                onPress={onPressHandler}\r\n                style={styles.button}\r\n            >\r\n                <Transitioning.View transition={transition} ref={ref}>\r\n                    <SimpleLineIcons size={30} name={toggled ? 'list' : 'map'} />\r\n                </Transitioning.View>\r\n            </TouchableOpacity>\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nconst transition = (\r\n    <Transition.Together>\r\n        <Transition.Out type=\"scale\" durationMs={100}  />\r\n        <Transition.Change interpolation={'easeInOut'}/>\r\n        <Transition.In type=\"scale\" durationMs={100} delayMs={50} />\r\n    </Transition.Together>\r\n);\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        borderWidth:1,\r\n        borderColor:'rgba(0,0,0,0.2)',\r\n        alignItems:'center',\r\n        justifyContent:'center',\r\n        width:65,\r\n        height:65,\r\n        backgroundColor:'#fff',\r\n        borderRadius:50,\r\n    },\r\n    view: {\r\n        position: 'absolute',\r\n        bottom: 40,\r\n        right: 40\r\n    }\r\n});\r\n\r\nexport default ToggleIcon;\r\n"]},"metadata":{},"sourceType":"module"}