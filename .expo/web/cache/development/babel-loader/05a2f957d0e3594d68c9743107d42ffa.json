{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\brandon.lacy\\\\xplore\\\\src\\\\context\\\\LocationContext.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport * as Location from \"expo-location\";\nimport SimpleToast from \"react-native-simple-toast\";\nvar LocationContext = React.createContext({\n  currentLocation: {\n    lat: 0,\n    long: 0\n  }\n});\nexport var LocationProvider = function LocationProvider(props) {\n  var _useState = useState({\n    lat: 0,\n    long: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentLocation = _useState2[0],\n      setCurrentLocation = _useState2[1];\n\n  var checkForPermissions = function checkForPermissions() {\n    var locationEnabled, _await$Location$reque, status, location;\n\n    return _regeneratorRuntime.async(function checkForPermissions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.hasServicesEnabledAsync());\n\n          case 2:\n            locationEnabled = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n          case 5:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 11;\n              break;\n            }\n\n            console.log('uh problem');\n            SimpleToast.show(\"This app requires location permissions\");\n            return _context.abrupt(\"return\", null);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n          case 13:\n            location = _context.sent;\n            return _context.abrupt(\"return\", location);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    checkForPermissions().then(function (result) {\n      if (result !== null) {\n        setCurrentLocation({\n          lat: result.coords.latitude,\n          long: result.coords.longitude\n        });\n      }\n    });\n  }, []);\n  return React.createElement(LocationContext.Provider, _extends({\n    value: {\n      currentLocation: currentLocation\n    }\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }));\n};\nexport var useLocationContext = function useLocationContext() {\n  var context = useContext(LocationContext);\n\n  if (context === undefined) {\n    throw new Error(\"Must be inside provider\");\n  }\n\n  return context;\n};\nexport default LocationContext;","map":{"version":3,"sources":["C:/Users/brandon.lacy/xplore/src/context/LocationContext.tsx"],"names":["React","useContext","useEffect","useState","Location","SimpleToast","LocationContext","createContext","currentLocation","lat","long","LocationProvider","props","setCurrentLocation","checkForPermissions","hasServicesEnabledAsync","locationEnabled","requestForegroundPermissionsAsync","status","console","log","show","getCurrentPositionAsync","location","then","result","coords","latitude","longitude","useLocationContext","context","undefined","Error"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAA8BC,UAA9B,EAA0CC,SAA1C,EAAqDC,QAArD,QAAqE,OAArE;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AAYA,IAAMC,eAAe,GAAGN,KAAK,CAACO,aAAN,CAAsC;AAC1DC,EAAAA,eAAe,EAAE;AACbC,IAAAA,GAAG,EAAE,CADQ;AAEbC,IAAAA,IAAI,EAAE;AAFO;AADyC,CAAtC,CAAxB;AAOA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAwD;AACpF,kBAA8CT,QAAQ,CAAY;AAC9DM,IAAAA,GAAG,EAAE,CADyD;AAE9DC,IAAAA,IAAI,EAAE;AAFwD,GAAZ,CAAtD;AAAA;AAAA,MAAOF,eAAP;AAAA,MAAwBK,kBAAxB;;AAKA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACMV,QAAQ,CAACW,uBAAT,EADN;;AAAA;AAClBC,YAAAA,eADkB;AAAA;AAAA,6CAGCZ,QAAQ,CAACa,iCAAT,EAHD;;AAAA;AAAA;AAGhBC,YAAAA,MAHgB,yBAGhBA,MAHgB;;AAAA,kBAIpBA,MAAM,KAAK,SAJS;AAAA;AAAA;AAAA;;AAKpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAf,YAAAA,WAAW,CAACgB,IAAZ,CAAiB,wCAAjB;AANoB,6CAOb,IAPa;;AAAA;AAAA;AAAA,6CAUDjB,QAAQ,CAACkB,uBAAT,CAAiC,EAAjC,CAVC;;AAAA;AAUlBC,YAAAA,QAVkB;AAAA,6CAWjBA,QAXiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAaArB,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,mBAAmB,GAAGU,IAAtB,CAA2B,UAACC,MAAD,EAAY;AACnC,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACjBZ,QAAAA,kBAAkB,CAAC;AACfJ,UAAAA,GAAG,EAAEgB,MAAM,CAACC,MAAP,CAAcC,QADJ;AAEfjB,UAAAA,IAAI,EAAEe,MAAM,CAACC,MAAP,CAAcE;AAFL,SAAD,CAAlB;AAIH;AACJ,KAPD;AAQH,GATQ,EASN,EATM,CAAT;AAUA,SACI,oBAAC,eAAD,CAAiB,QAAjB;AACI,IAAA,KAAK,EAAE;AACHpB,MAAAA,eAAe,EAAfA;AADG;AADX,KAIQI,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAQH,CArCM;AAuCP,OAAO,IAAMiB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAwB;AACtD,MAAMC,OAAO,GAAG7B,UAAU,CAAmBK,eAAnB,CAA1B;;AACA,MAAIwB,OAAO,KAAKC,SAAhB,EAA2B;AACvB,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,SAAOF,OAAP;AACH,CANM;AASP,eAAexB,eAAf","sourcesContent":["import React, { ReactElement, useContext, useEffect, useState } from \"react\";\r\nimport * as Location from \"expo-location\";\r\nimport { check } from \"react-native-permissions\";\r\nimport SimpleToast from \"react-native-simple-toast\";\r\n\r\nexport interface ILocation {\r\n    lat: number;\r\n    long: number;\r\n}\r\n\r\nexport interface ILocationContext {\r\n    currentLocation: ILocation\r\n}\r\n\r\n\r\nconst LocationContext = React.createContext<ILocationContext>({\r\n    currentLocation: {\r\n        lat: 0,\r\n        long: 0\r\n    }\r\n});\r\n\r\nexport const LocationProvider = (props: { children: ReactElement | ReactElement[] }) => {\r\n    const [currentLocation, setCurrentLocation] = useState<ILocation>({\r\n        lat: 0,\r\n        long: 0\r\n    });\r\n\r\n    const checkForPermissions = async () => {\r\n        const locationEnabled = await Location.hasServicesEnabledAsync();\r\n\r\n        const { status } = await Location.requestForegroundPermissionsAsync();\r\n        if (status !== 'granted') {\r\n            console.log('uh problem');\r\n            SimpleToast.show(\"This app requires location permissions\");\r\n            return null;\r\n        }\r\n\r\n        const location = await Location.getCurrentPositionAsync({});\r\n        return location;\r\n    }\r\n    useEffect(() => {\r\n        checkForPermissions().then((result) => {\r\n            if (result !== null) {\r\n                setCurrentLocation({\r\n                    lat: result.coords.latitude,\r\n                    long: result.coords.longitude\r\n                })\r\n            }\r\n        })\r\n    }, [])\r\n    return (\r\n        <LocationContext.Provider\r\n            value={{\r\n                currentLocation\r\n            }}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nexport const useLocationContext = (): ILocationContext => {\r\n    const context = useContext<ILocationContext>(LocationContext);\r\n    if (context === undefined) {\r\n        throw new Error(\"Must be inside provider\");\r\n    }\r\n    return context;\r\n};\r\n\r\n\r\nexport default LocationContext;\r\n"]},"metadata":{},"sourceType":"module"}